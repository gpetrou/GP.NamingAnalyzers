<Project>

  <Target Condition=" '$(IsTestProject)' == 'false' "
    Name="SetGitVersionDependsOn"
    AfterTargets="PrepareForBuild"
    BeforeTargets="SetGitExe">

    <PropertyGroup>
      <GitVersionDependsOn>
        GitInfo;
        _GitBaseVersionFile;
        _GitBaseVersionBranch;
        _GitBaseVersionTagExists;
        _GitBaseVersionTag;
        _GitBaseVersionFallback;
        _GitValidateBaseVersion;
        _GitPopulateVersionInfo;
        _GitWriteCache
      </GitVersionDependsOn>
    </PropertyGroup>

  </Target>

  <Target Condition=" '$(IsTestProject)' == 'false' "
    Name="SetAssemblyInfoVersions"
    AfterTargets="PrepareForBuild"
    BeforeTargets="GenerateAssemblyInfo;GetPackageMetadata;GenerateNuspec;Pack"
    DependsOnTargets="GitVersion;AddSourceRevisionToInformationalVersion">

    <PropertyGroup>
      <AssemblyVersion>$(GitBaseVersion)</AssemblyVersion>
      <FileVersion>$(AssemblyVersion).$(GitCommits)</FileVersion>

      <!-- When building from a regular commit. -->
      <InformationalVersion>$(AssemblyVersion)-pre.$(GitCommits).g$(GitCommit)</InformationalVersion>
      <PackageVersion>$(InformationalVersion)</PackageVersion>

      <!-- When building from a tag. -->
      <InformationalVersion Condition=" $([System.Text.RegularExpressions.Regex]::IsMatch($(GitTag), '^\d+\.\d+\.\d+$')) ">$(AssemblyVersion).$(GitCommits)-g$(GitCommit)</InformationalVersion>
      <PackageVersion Condition=" $([System.Text.RegularExpressions.Regex]::IsMatch($(GitTag), '^\d+\.\d+\.\d+$')) ">$(AssemblyVersion)</PackageVersion>
    </PropertyGroup>

  </Target>

</Project>